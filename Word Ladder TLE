class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        if (vstrSearch(wordList, endWord) == -1) return 0;
        
        vector<int> visited(wordList.size(), 0);
        int idx = vstrSearch(wordList, beginWord);
        //std::cout << "beginWord at" << idx << std::endl;
        if (idx != -1) visited[idx] = 1;
        int ans = wordList.size() + 2;
        helper(beginWord, endWord, wordList, visited, 1, &ans);
        if (ans == wordList.size() + 2) return 0;
        return ans;
    }
    void helper(string currWord, string endWord, vector<string>& wordList, vector<int> visited, int d, int* ans) {
        for (int i = 0; i < currWord.size(); ++i) {
            for (int j = 0; j < 26; ++j) {
                string nextWord = currWord;
                nextWord[i] = 'a' + j;
                if (nextWord[i] == currWord[i]) continue;
                
                if (nextWord == endWord) {
                    if (*ans > d + 1) *ans = d + 1;
                    std::cout << "reachable" << d + 1 << std::endl;
                    return;
                }
                
                int idx = vstrSearch(wordList, nextWord);
                if (idx == -1 || visited[idx]) continue;
                
                vector<int> visited_cpy(wordList.size(), 0);
                for (int i = 0; i < wordList.size(); ++i) {
                    visited_cpy[i] = visited[i];
                }
                visited_cpy[idx] = 1;
                std::cout << nextWord << "found at " << idx << std::endl;
                helper(nextWord, endWord, wordList, visited_cpy, d + 1, ans);
            }
        }
    }
    
    int vstrSearch(vector<string>& wordList, string currWord) {
        int idx = 0;
        for (auto s : wordList) {
            if (currWord == s) return idx;
            ++idx;
        }
        return -1;
    }
};
